CREATE DATABASE BANK

CREATE TABLE Clients (
	Id INT PRIMARY KEY IDENTITY,
	FirstName NVARCHAR (50) NOT NULL,
	LastName NVARCHAR (50) NOT NULL
	)
	select *from clients;
CREATE TABLE Client (
	Id INT PRIMARY KEY IDENTITY,
	FirstName NVARCHAR (50) NOT NULL,
	LastName NVARCHAR (50) NOT NULL
)
DROP TABLE Client;

CREATE TABLE AccountTypes(
Id INT PRIMARY KEY IDENTITY,
[NAME] NVARCHAR(50) NOT NULL)
[Name] NVARCHAR(50) NOT NULL 

) 
select *from AccountTypes

CREATE TABLE Accounts (
	Id INT PRIMARY KEY IDENTITY,
	AccountTypeId INT FOREIGN KEY REFERENCES AccountTypes(Id),
	Balance DECIMAL(15, 2) NOT NULL DEFAULT(0),
	ClientId INT FOREIGN KEY REFERENCES Clients(Id)
)
select *from Accounts

INSERT INTO Clients(FirstName,LastName)VALUES
('greta', 'Andersson'),
('Peter', 'Pettersson'),
('Mel', 'Gibson'),
('Maria', 'Danielsson')

select *from Clients

INSERT INTO AccountTypes (Name) VALUES
('Checking'),
('Savings')

select *from AccountTypes

INSERT INTO Accounts(ClientId, AccountTypeId, Balance) VALUES
(1, 1, 175),
(2, 1, 275.56),
(3, 1, 138.01),
(4, 1, 40.30),
(4, 2, 375.50)

select *from Accounts
select *from AccountTypes
select *from Clients

CREATE VIEW v_ClientBalances AS
SELECT(FirstName+' '+LastName)AS [Name],AccountTypes.NAME as [Account Type],Balance
FROM Accounts
Join Clients on Clients.Id=Accounts.ClientId
Join AccountTypes on AccountTypes.Id=Accounts.AccountTypeId

select * from Accounts

****Creating a function calculating the total balance from all accounts of a single client****

create FUNCTION f_CalculateTotalBalance 
(
	*** Adding  the parameters***

	@ClientID INT
)
RETURNS DECIMAL(15, 2)
AS
BEGIN
	*** Declaring the return result**

	DECLARE @Result Decimal(15,2)

	
	SELECT @Result = Sum(Balance) from Accounts where ClientId=@ClientID

	
	RETURN @Result

END

select dbo.f_CalculateTotalBalance(4) AS Balance


****Procedure for creating a new account to a existing customer****

CREATE PROCEDURE p_AddAccount
	
	@ClientId INT, @AccountTypeId INT 	
AS
BEGIN
    
	INSERT INTO Accounts (ClientId, AccountTypeId) VALUES (@ClientId, @AccountTypeId)
END
GO

select * from Accounts;

p_AddAccount 2,2;

select * from Accounts;

***Deposit Procedure***

CREATE PROCEDURE p_Deposit 

@AccountId INT, @Amount DECIMAL(15, 2) 
AS
BEGIN

UPDATE Accounts
SET Balance += @Amount
WHERE Id = @AccountId
END
GO

p_Deposit 2,100;

select * from Accounts;

p_Deposit 4,100;

*** Withdraw Procedure***

create procedure p_Withdraw

@AccountId INT, @Amount DECIMAL(15, 2) 
AS
BEGIN

	DECLARE @OldBalance DECIMAL(15, 2)
	SELECT @OldBalance = Balance FROM Accounts WHERE Id = @AccountId
	IF (@OldBalance - @Amount >= 0)
	BEGIN
		UPDATE Accounts
		SET Balance -= @Amount
		WHERE Id = @AccountId
	END
	ELSE
	BEGIN
		RAISERROR('Insufficient funds')
	END
END


p_Withdraw 2,100;

select * from Accounts;

p_Withdraw 1,175;


	Id INT PRIMARY KEY IDENTITY,
	AccountId INT FOREIGN KEY REFERENCES Accounts(Id),
	OldBalance DECIMAL(15, 2) NOT NULL,
	NewBalance DECIMAL(15, 2) NOT NULL,
	Amount AS NewBalance - OldBalance,
	[DateTime] DATETIME2
)

***Trigger Creation of Trigger***

CREATE TRIGGER tr_Transaction ON Accounts
AFTER UPDATE
AS
	INSERT INTO Transactions (AccountId, OldBalance, NewBalance, [DateTime])
	SELECT inserted.Id, deleted.Balance, inserted.Balance, GETDATE() FROM inserted
	JOIN deleted ON inserted.Id = deleted.Id



p_Deposit 1, 25.00
GO

p_Deposit 1, 40.00
GO

p_Withdraw 2, 200.00
GO

p_Deposit 4, 180.00
GO

select * from Transactions;

